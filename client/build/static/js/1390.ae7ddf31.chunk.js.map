{"version":3,"file":"static/js/1390.ae7ddf31.chunk.js","mappings":"iRAkLA,UAzJiB,WACf,OAAkCA,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACA,GAAgCJ,EAAAA,EAAAA,WAAS,GAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KACA,GAA8BN,EAAAA,EAAAA,UAAS,GAAvC,eAAOO,EAAP,KAAgBC,EAAhB,KACA,GAA0CR,EAAAA,EAAAA,UAAS,IAAnD,eAAsBS,GAAtB,WACA,GAAgCT,EAAAA,EAAAA,UAAS,QAAzC,eAAOU,EAAP,KAAiBC,EAAjB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,OAEfC,EAAAA,EAAAA,YAAS,iBAAC,sGACWN,GAASO,EAAAA,EAAAA,IAAeH,EAAOI,KAD1C,OACFC,EADE,OAGRnB,EAAY,OAACmB,QAAD,IAACA,OAAD,EAACA,EAAMpB,WACnBG,EAAW,OAACiB,QAAD,IAACA,OAAD,EAACA,EAAMlB,UAClBG,EAAW,OAACe,QAAD,IAACA,OAAD,EAACA,EAAMhB,UAClBG,EAAU,OAACa,QAAD,IAACA,OAAD,EAACA,EAAMd,SACjBE,EAAgB,OAACY,QAAD,IAACA,OAAD,EAACA,EAAMC,uBACvBX,EAAW,UAACU,EAAKX,gBAAN,QAAkB,QARrB,2CASP,CAACS,EAAAA,KAEJ,IAiBMI,EAAW,WACfT,EAAS,iBAGX,OACE,iCACE,SAAC,KAAD,WACE,SAAC,KAAD,CAAMU,GAAI,GAAV,UACE,UAAC,KAAD,CAAOC,UAAU,OAAjB,WACE,SAAC,KAAD,WACE,6CAEF,SAAC,KAAD,WACE,SAAC,KAAD,CAAYA,UAAU,aAAtB,UACE,SAAC,KAAD,CAAOC,SA/BC,SAACC,GACrBA,EAAEC,iBAEFhB,GACEiB,EAAAA,EAAAA,IACEb,EAAOI,GACP,CACEnB,UAAAA,EACAE,SAAAA,EACAE,SAAUA,EACVE,QAAAA,EACAG,SAAAA,GAEFa,KAkBQ,UACE,UAAC,KAAD,CAAME,UAAU,2BAAhB,WACE,UAAC,KAAD,YACE,iBAAKA,UAAU,OAAf,WACE,SAAC,KAAD,CAAYK,QAAQ,2BAApB,yBACA,SAAC,KAAD,CACEC,KAAK,OACLC,MAAO/B,EACPgC,YAAY,mBACZC,SAAU,SAACP,GAAD,OAAOzB,EAAayB,EAAEQ,OAAOH,cAG3C,iBAAKP,UAAU,OAAf,WACE,SAAC,KAAD,CAAYK,QAAQ,2BAApB,sBACA,SAAC,KAAD,CACEC,KAAK,OACLC,MAAOzB,EACP0B,YAAY,gBACZC,SAAU,SAACP,GAAD,OAAOnB,EAAWmB,EAAEQ,OAAOH,cAGzC,iBAAKP,UAAU,QAAf,WACE,SAAC,KAAD,CAAYK,QAAQ,yBAApB,qBACA,UAAC,KAAD,CACEI,SAAU,SAACP,GAAD,OAAOrB,EAAYqB,EAAEQ,OAAOH,QACtCI,UAAQ,EACRhB,GAAG,qBACHY,MAAO3B,EAJT,WAME,+CAEA,mBAAQ2B,OAAO,EAAf,sBACA,mBAAQA,OAAO,EAAf,iCAIN,UAAC,KAAD,YACE,iBAAKP,UAAU,OAAf,WACE,SAAC,KAAD,CAAYK,QAAQ,2BAApB,wBACA,SAAC,KAAD,CACEC,KAAK,OACLC,MAAO7B,EACP8B,YAAY,kBACZC,SAAU,SAACP,GAAD,OAAOvB,EAAYuB,EAAEQ,OAAOH,cAG1C,iBAAKP,UAAU,QAAf,WACE,SAAC,KAAD,CAAYK,QAAQ,WAApB,wBACA,UAAC,KAAD,CACEI,SAAU,SAACP,GAAD,OAAOhB,EAAYgB,EAAEQ,OAAOH,QACtCI,UAAQ,EACRJ,MAAOtB,EACPU,GAAG,WAJL,WAME,kDAEA,mBAAQY,MAAM,SAAd,sBACA,mBAAQA,MAAM,WAAd,wBACA,mBAAQA,MAAM,OAAd,0BAmBJ,gBAAKP,UAAU,kBAAf,UACE,SAAC,KAAD,CACEM,KAAK,SACLM,MAAM,YACNC,QAAQ,UACRb,UAAU,WAJZ,wCAiBlB,SAAC,KAAD,S","sources":["views/admin/users/UserEdit.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CFormTextarea,\n  CRow,\n  CFormSelect,\n  CContainer,\n} from '@coreui/react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport { useDispatch } from 'react-redux'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport { userByIdAction, updateUserAction } from 'src/store/actions/user'\n\nimport { ToastContainer } from 'react-toastify'\nimport { toastify } from 'src/store/services/toastify'\n\nimport 'react-toastify/dist/ReactToastify.css'\nconst UserEdit = () => {\n  const [firstName, setFirstName] = useState('')\n  const [lastName, setLastName] = useState('')\n  const [isActive, setIsActive] = useState(true)\n  const [credits, setCredits] = useState(0)\n  const [stripeAccount, setStripeAccount] = useState('')\n  const [userType, setUserType] = useState('USER')\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n  const params = useParams()\n\n  useEffect(async () => {\n    const data = await dispatch(userByIdAction(params.id))\n\n    setFirstName(data?.firstName)\n    setLastName(data?.lastName)\n    setIsActive(data?.isActive)\n    setCredits(data?.credits)\n    setStripeAccount(data?.isStripeAccountActive)\n    setUserType(data.userType ?? 'USER')\n  }, [userByIdAction])\n\n  const submitHandler = (e) => {\n    e.preventDefault()\n\n    dispatch(\n      updateUserAction(\n        params.id,\n        {\n          firstName,\n          lastName,\n          isActive: isActive,\n          credits,\n          userType,\n        },\n        callback,\n      ),\n    )\n  }\n  const callback = () => {\n    navigate('/admin/users')\n  }\n\n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Edit User</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CContainer className=\" mt-3 mb-5\">\n                <CForm onSubmit={submitHandler}>\n                  <CRow className=\" justify-content-center \">\n                    <CCol>\n                      <div className=\"mb-3\">\n                        <CFormLabel htmlFor=\"exampleFormControlInput1\">First Name</CFormLabel>\n                        <CFormInput\n                          type=\"text\"\n                          value={firstName}\n                          placeholder=\"Enter First Name\"\n                          onChange={(e) => setFirstName(e.target.value)}\n                        />\n                      </div>\n                      <div className=\"mb-3\">\n                        <CFormLabel htmlFor=\"exampleFormControlInput1\">Credits</CFormLabel>\n                        <CFormInput\n                          type=\"text\"\n                          value={credits}\n                          placeholder=\"Enter Credits\"\n                          onChange={(e) => setCredits(e.target.value)}\n                        />\n                      </div>\n                      <div className=\"mb-3 \">\n                        <CFormLabel htmlFor=\"exampleFormControlText\">Status</CFormLabel>\n                        <CFormSelect\n                          onChange={(e) => setIsActive(e.target.value)}\n                          required\n                          id=\"validationCustom01\"\n                          value={isActive}\n                        >\n                          <option>Select Status</option>\n\n                          <option value={true}> Active</option>\n                          <option value={false}> InActive</option>\n                        </CFormSelect>\n                      </div>\n                    </CCol>\n                    <CCol>\n                      <div className=\"mb-3\">\n                        <CFormLabel htmlFor=\"exampleFormControlInput1\">Last Name</CFormLabel>\n                        <CFormInput\n                          type=\"text\"\n                          value={lastName}\n                          placeholder=\"Enter Last Name\"\n                          onChange={(e) => setLastName(e.target.value)}\n                        />\n                      </div>\n                      <div className=\"mb-3 \">\n                        <CFormLabel htmlFor=\"userType\">User Type</CFormLabel>\n                        <CFormSelect\n                          onChange={(e) => setUserType(e.target.value)}\n                          required\n                          value={userType}\n                          id=\"userType\"\n                        >\n                          <option>Select User Type</option>\n\n                          <option value=\"DEALER\"> Dealer</option>\n                          <option value=\"RESELLER\"> Reseller</option>\n                          <option value=\"USER\"> User</option>\n                        </CFormSelect>\n                      </div>\n\n                      {/* <div className=\"mb-3 \">\n                        <CFormLabel htmlFor=\"exampleFormControlText\">\n                          Select Account Status{' '}\n                        </CFormLabel>\n                        <CFormSelect\n                          onChange={(e) => setStripeAccount(e.target.value)}\n                          required\n                          id=\"validationCustom01\"\n                        >\n                          <option>Select Status</option>\n\n                          <option value={true}> Active</option>\n                          <option value={false}> Disable</option>\n                        </CFormSelect>\n                      </div> */}\n                      <div className=\" pt-3  text-end\">\n                        <CButton\n                          type=\"submit\"\n                          color=\"secondary\"\n                          variant=\"outline\"\n                          className=\"text-end\"\n                        >\n                          Save\n                        </CButton>\n                      </div>\n                    </CCol>\n                  </CRow>\n                </CForm>\n              </CContainer>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <ToastContainer />\n    </>\n  )\n}\n\nexport default UserEdit\n"],"names":["useState","firstName","setFirstName","lastName","setLastName","isActive","setIsActive","credits","setCredits","setStripeAccount","userType","setUserType","dispatch","useDispatch","navigate","useNavigate","params","useParams","useEffect","userByIdAction","id","data","isStripeAccountActive","callback","xs","className","onSubmit","e","preventDefault","updateUserAction","htmlFor","type","value","placeholder","onChange","target","required","color","variant"],"sourceRoot":""}