{"version":3,"file":"static/js/239.4fe012ab.chunk.js","mappings":"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","sources":["components/Loader.js","views/order/OrderList.js"],"sourcesContent":["import React from 'react'\n\nfunction Loader({ loading = false, text = '' }) {\n  return (\n    <>\n      {loading && (\n        <div id=\"overlay\">\n          <div className=\"spinner-border\" role=\"status\">\n            <span className=\"visually-hidden\">Loading...</span>\n          </div>\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default Loader\n","import React, { useEffect, useState } from 'react'\nimport CIcon from '@coreui/icons-react'\nimport 'react-toastify/dist/ReactToastify.css'\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CBadge,\n  CTooltip,\n  CLink,\n  CButton,\n} from '@coreui/react'\nimport { cilPencil, cilPlus, cilMagnifyingGlass } from '@coreui/icons'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { orderList } from 'src/store/selector/order'\nimport { orderListAction, orderListClearAction } from 'src/store/actions/order'\nimport { Link } from 'react-router-dom'\nimport Loader from 'src/components/Loader'\n\nconst OrderList = () => {\n  const orders = useSelector(orderList)\n  const dispatch = useDispatch()\n  const [loading, setLoading] = useState(false)\n  const [search, setSearch] = useState('')\n\n  useEffect(() => {\n    setLoading(true)\n\n    dispatch(orderListAction(loadingCallback))\n\n    return () => {\n      dispatch(orderListClearAction())\n    }\n  }, [orderListAction])\n\n  const loadingCallback = () => {\n    setLoading(false)\n  }\n  const getBageColor = (orderStatus) => {\n    const statusSchema = {\n      Pending: 'secondary',\n      Completed: 'success',\n      Confirmed: 'success',\n      InProgress: 'primary',\n      Rejected: 'danger',\n    }\n    return statusSchema[orderStatus]\n  }\n\n  function searchFor(term) {\n    return function (x) {\n      return (\n        x.orderNumber.toLowerCase().includes(term.toLowerCase()) ||\n        x.userId?.firstName.toLowerCase().includes(term.toLowerCase()) ||\n        x.serviceType.toLowerCase().includes(term.toLowerCase()) ||\n        x.service?.name.toLowerCase().includes(term.toLowerCase()) ||\n        !term\n      );\n    };\n  }\n  return (\n    <>\n      <Loader loading={loading}></Loader>\n\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-4\">\n            <CCardHeader >\n              <div className='row'>\n                <div className='col-md-6'>\n                  <div className='d-flex'>\n                    <input className='form-control me-2' placeholder='search' onChange={e => setSearch(e.target.value)} />\n                    <CButton onClick={() => setSearch('')} type=\"button\" color=\"secondary\" variant=\"outline\">\n                      Clear\n                    </CButton>\n                  </div>\n                </div>\n                <div className='col-md-6 text-end'>\n                  <Link to=\"/orders/edit/new/IMEI\">\n                    <CButton color=\"secondary\" variant=\"outline\">\n                      IMEI Order\n                    </CButton>\n                  </Link>\n                  <Link to=\"/orders/edit/new/SERVER\">\n                    <CButton className=\"ms-2\" color=\"secondary\" variant=\"outline\">\n                      Server Order\n                    </CButton>\n                  </Link>\n                </div>\n              </div>\n            </CCardHeader>\n            <CCardBody>\n              <div className='table-responsive'>\n                <CTable>\n                  <CTableHead>\n                    <CTableRow>\n                      <CTableHeaderCell scope=\"col\">Order Number</CTableHeaderCell>\n                      <CTableHeaderCell scope=\"col\">Category Name</CTableHeaderCell>\n                      <CTableHeaderCell scope=\"col\">Service Name</CTableHeaderCell>\n                      <CTableHeaderCell scope=\"col\">Customer Name</CTableHeaderCell>\n                      <CTableHeaderCell scope=\"col\">Serial Numbers</CTableHeaderCell>\n                      <CTableHeaderCell scope=\"col\">Credits</CTableHeaderCell>\n                      <CTableHeaderCell scope=\"col\">Created At</CTableHeaderCell>\n                      {/* {\n\n                    <CTableHeaderCell scope=\"col\">IMEI Numbers</CTableHeaderCell>\n                    } */}\n                      <CTableHeaderCell scope=\"col\">Status</CTableHeaderCell>\n                      <CTableHeaderCell scope=\"col\">Action</CTableHeaderCell>\n                    </CTableRow>\n                  </CTableHead>\n                  <CTableBody>\n                    {orders?.filter(searchFor(search)).map((order) => {\n                      return (\n                        <CTableRow key={order._id}>\n                          {/* <CTableHeaderCell scope=\"row\">1</CTableHeaderCell> */}\n                          <CTableDataCell>{order.orderNumber}</CTableDataCell>\n                          <CTableDataCell>{order?.service?.categoryId?.name}</CTableDataCell>\n                          <CTableDataCell>{order?.service?.name}</CTableDataCell>\n                          <CTableDataCell>{order?.userId?.firstName}</CTableDataCell>\n                          <CTableDataCell>{order?.serialNumber}</CTableDataCell>\n                          <CTableDataCell>{order?.creditsUsed}</CTableDataCell>\n                          <CTableDataCell>\n                            {new Date(order?.fromDate).toISOString().split('T')[0]}\n                          </CTableDataCell>\n\n                          {/* {\n                          <CTableDataCell>\n                            <ul>\n                              {order.imeiNumbers.map((number, index) =>\n                                number ? <li key={index}>{number}</li> : null,\n                              )}\n                            </ul>\n                          </CTableDataCell>\n                        } */}\n                          <CTableDataCell>\n                            <CBadge className=\"pt-2 pb-2\" color={getBageColor(order?.status)}>\n                              {order?.status}\n                            </CBadge>\n                          </CTableDataCell>\n                          <CTableDataCell>\n                            {/* <Link to={`/orders/edit/${order._id}`}>\n                            <CIcon className=\"text-secondary\" icon={cilPencil} />\n                          </Link> */}\n                            &nbsp;&nbsp;&nbsp;&nbsp;\n                            <Link to={`/orders/${order._id}`}>\n                              <CIcon className=\"text-secondary \" icon={cilMagnifyingGlass} />\n                            </Link>\n                          </CTableDataCell>\n                        </CTableRow>\n                      )\n                    })}\n                  </CTableBody>\n                </CTable>\n              </div>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n\nexport default OrderList\n"],"names":["loading","text","id","className","role","orders","useSelector","orderList","dispatch","useDispatch","useState","setLoading","search","setSearch","useEffect","orderListAction","loadingCallback","orderListClearAction","term","xs","placeholder","onChange","e","target","value","onClick","type","color","variant","to","scope","filter","x","orderNumber","toLowerCase","includes","userId","firstName","serviceType","service","name","map","order","orderStatus","categoryId","serialNumber","creditsUsed","Date","fromDate","toISOString","split","status","Pending","Completed","Confirmed","InProgress","Rejected","_id","icon","cilMagnifyingGlass"],"sourceRoot":""}