{"version":3,"file":"static/js/4262.dcccc5b0.chunk.js","mappings":"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","sources":["components/Loader.js","views/admin/orders/OrderList.js"],"sourcesContent":["import React from 'react'\n\nfunction Loader({ loading = false, text = '' }) {\n  return (\n    <>\n      {loading && (\n        <div id=\"overlay\">\n          <div className=\"spinner-border\" role=\"status\">\n            <span className=\"visually-hidden\">Loading...</span>\n          </div>\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default Loader\n","import React, { useEffect, useState } from 'react'\nimport CIcon from '@coreui/icons-react'\nimport 'react-toastify/dist/ReactToastify.css'\nimport {\n  CCard,\n  CForm,\n  CCardBody,\n  CFormSelect,\n  CButton,\n  CCol,\n  CRow,\n  CFormInput,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CBadge,\n  CPagination,\n  CPaginationItem,\n} from '@coreui/react'\nimport { cilPencil, cilMagnifyingGlass } from '@coreui/icons'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { adminOrderList, adminUsers, totalRecords } from 'src/store/selector/order'\nimport {\n  orderListAction,\n  adminOrderListAction,\n  adminUsersListAction,\n  adminOrderListClearAction,\n} from 'src/store/actions/order'\nimport { Link } from 'react-router-dom'\nimport Loader from 'src/components/Loader'\n\nconst OrderList = () => {\n  const orders = useSelector(adminOrderList)\n  const users = useSelector(adminUsers)\n  const total = useSelector(totalRecords)\n  const [statusFilter, setStatusFilter] = useState('')\n  const [userFilter, setUserFilter] = useState('')\n  const [orderFilter, setOrderFilter] = useState('')\n  const [serviceTypeFilter, setServiceTypeFilter] = useState('')\n\n  const [limit, setLimit] = useState(50)\n  const [loading, setLoading] = useState(false)\n  const [page, setPage] = useState(1)\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(adminUsersListAction())\n  }, [])\n\n  useEffect(() => {\n    setLoading(true)\n    dispatch(\n      adminOrderListAction(\n        {\n          limit,\n          page,\n          status: statusFilter,\n          userId: userFilter,\n          orderNumber: orderFilter,\n          serviceType: serviceTypeFilter,\n        },\n        loadingCallback,\n      ),\n    )\n\n    return () => {\n      dispatch(adminOrderListClearAction())\n    }\n  }, [orderListAction, page])\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    setLoading(true)\n\n    dispatch(\n      adminOrderListAction(\n        {\n          limit,\n          page,\n          status: statusFilter,\n          userId: userFilter,\n          orderNumber: orderFilter,\n          serviceType: serviceTypeFilter,\n        },\n        loadingCallback,\n      ),\n    )\n  }\n\n  const loadingCallback = () => {\n    setLoading(false)\n  }\n\n  const getBageColor = (orderStatus) => {\n    const statusSchema = {\n      Pending: 'secondary',\n      Completed: 'success',\n      Confirmed: 'success',\n      InProgress: 'primary',\n      Rejected: 'danger',\n    }\n    return statusSchema[orderStatus]\n  }\n\n  const clearFilters = async () => {\n    setLoading(true)\n    setStatusFilter('')\n    setUserFilter('')\n    setServiceTypeFilter('')\n    setOrderFilter('')\n\n    // console.log({ statusFilter, userFilter, orderFilter, serviceTypeFilter })\n\n    await dispatch(\n      adminOrderListAction(\n        {\n          limit,\n          page,\n          status: '',\n          userId: '',\n          orderNumber: '',\n          serviceType: '',\n        },\n        loadingCallback,\n      ),\n    )\n  }\n\n  return (\n    <>\n      <Loader loading={loading}></Loader>\n      <CRow>\n        <CForm onSubmit={handleSubmit}>\n          <CRow className=\"row pb-3\">\n            <div className=\"col-md-2 \">\n              <CFormInput\n                value={orderFilter}\n                type=\"text\"\n                placeholder=\"Order Number\"\n                onChange={(e) => setOrderFilter(e.target.value)}\n              />\n            </div>\n            <div className=\"col-md-2 \">\n              <CFormSelect\n                aria-label=\"Default select example\"\n                value={userFilter}\n                onChange={(e) => setUserFilter(e.target.value)}\n              >\n                <option disabled value=\"\">\n                  User\n                </option>\n                {users?.map((user) => (\n                  <option key={user?._id} value={user?._id}>\n                    {user?.firstName}\n                  </option>\n                ))}\n              </CFormSelect>\n            </div>\n            <div className=\"col-md-2\">\n              <CFormSelect\n                aria-label=\"Default select example\"\n                value={serviceTypeFilter}\n                onChange={(e) => setServiceTypeFilter(e.target.value)}\n              >\n                <option disabled value=\"\">\n                  Service Type\n                </option>\n                <option value=\"\">Both</option>\n                <option value=\"IMEI\">IMEI</option>\n                <option value=\"SERVER\">SERVER</option>\n              </CFormSelect>\n            </div>\n            <div className=\"col-md-2 \">\n              <CFormSelect\n                aria-label=\"Default select example\"\n                value={statusFilter}\n                onChange={(e) => setStatusFilter(e.target.value)}\n              >\n                <option disabled value=\"\">\n                  Status\n                </option>\n                <option value=\"\">All</option>\n                {['Pending', 'Confirmed', 'In Progress', 'Completed', 'Rejected'].map((status) => (\n                  <option key={status} value={status}>\n                    {status}\n                  </option>\n                ))}\n              </CFormSelect>\n            </div>\n\n            <div className=\"col-md-2 text-end ms-auto\">\n              <CButton type=\"submit\" color=\"secondary\" variant=\"outline\">\n                Search\n              </CButton>\n              <CButton\n                className=\"ms-2\"\n                type=\"button\"\n                color=\"secondary\"\n                variant=\"outline\"\n                onClick={clearFilters}\n              >\n                clear\n              </CButton>\n            </div>\n          </CRow>\n        </CForm>\n        <CCol xs={12}>\n          <CCard className=\"mb-4\">\n            <CCardBody className=\"table-responsive\">\n              <CTable>\n                <CTableHead>\n                  <CTableRow>\n                    <CTableHeaderCell scope=\"col\">Order Number</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Category Name</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Service Name</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Customer Name</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Serial Numbers</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Credits</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Created At</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Status</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Action</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {orders?.map((order) => {\n                    return (\n                      <CTableRow key={order._id}>\n                        <CTableDataCell>{order.orderNumber}</CTableDataCell>\n                        <CTableDataCell>{order?.service?.categoryId?.name}</CTableDataCell>\n                        <CTableDataCell>{order?.service?.name}</CTableDataCell>\n                        <CTableDataCell>{order?.userId?.firstName}</CTableDataCell>\n                        <CTableDataCell>{order?.serialNumber}</CTableDataCell>\n                        <CTableDataCell>{order?.creditsUsed}</CTableDataCell>\n                        <CTableDataCell>\n                          {new Date(order?.fromDate).toISOString().split('T')[0]}\n                        </CTableDataCell>\n                        {/* <CTableDataCell>\n                          {new Date(order.toDate).toISOString().split('T')[0]}\n                        </CTableDataCell> */}\n\n                        <CTableDataCell>\n                          <CBadge className=\"pt-2 pb-2\" color={getBageColor(order?.status)}>\n                            {order?.status}\n                          </CBadge>\n                        </CTableDataCell>\n                        <CTableDataCell>\n                          <Link to={`/admin/orders/edit/${order._id}`}>\n                            <CIcon className=\"text-secondary \" icon={cilPencil} />\n                          </Link>\n                          &nbsp;&nbsp;\n                          <Link to={`/admin/orders/${order._id}`}>\n                            <CIcon className=\"text-secondary \" icon={cilMagnifyingGlass} />\n                          </Link>\n                        </CTableDataCell>\n                      </CTableRow>\n                    )\n                  })}\n                </CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n\n        <CCol className=\"\" xs={12}>\n          <CPagination className=\"justify-content-end\" aria-label=\"Page navigation example\">\n            <CPaginationItem\n              aria-label=\"Previous\"\n              onClick={() => {\n                if (page > 1) {\n                  setPage(page - 1)\n                }\n              }}\n            >\n              <span aria-hidden=\"true\">&laquo;</span>\n            </CPaginationItem>\n\n            {Array.from({ length: Math.ceil(total / limit) }, (_, i) => i + 1).map((_page) => (\n              <CPaginationItem active={_page === page} key={_page} onClick={() => setPage(_page)}>\n                {_page}\n              </CPaginationItem>\n            ))}\n\n            <CPaginationItem aria-label=\"Next\">\n              <span\n                aria-hidden=\"true\"\n                onClick={() => {\n                  if (page < totalPages) {\n                    setPage(page + 1)\n                  }\n                }}\n              >\n                &raquo;\n              </span>\n            </CPaginationItem>\n          </CPagination>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n\nexport default OrderList\n"],"names":["loading","text","id","className","role","orders","useSelector","adminOrderList","users","adminUsers","total","totalRecords","useState","statusFilter","setStatusFilter","userFilter","setUserFilter","orderFilter","setOrderFilter","serviceTypeFilter","setServiceTypeFilter","limit","setLoading","page","setPage","dispatch","useDispatch","useEffect","adminUsersListAction","adminOrderListAction","status","userId","orderNumber","serviceType","loadingCallback","adminOrderListClearAction","orderListAction","clearFilters","onSubmit","e","preventDefault","value","type","placeholder","onChange","target","disabled","map","user","_id","firstName","color","variant","onClick","xs","scope","order","orderStatus","service","categoryId","name","serialNumber","creditsUsed","Date","fromDate","toISOString","split","Pending","Completed","Confirmed","InProgress","Rejected","to","icon","cilPencil","cilMagnifyingGlass","Array","from","length","Math","ceil","_","i","_page","active","totalPages"],"sourceRoot":""}