{"version":3,"file":"static/js/9943.197ce453.chunk.js","mappings":"6VA+VA,UA5TiB,WACf,IAAMA,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBC,GAAaF,EAAAA,EAAAA,IAAYG,EAAAA,IAC/B,GAAgCC,EAAAA,EAAAA,UAAS,IAAIC,MAA7C,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA4BH,EAAAA,EAAAA,UAAS,IAAIC,MAAzC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA8BL,EAAAA,EAAAA,UAAS,IAAvC,eAAOM,EAAP,KAAgBC,EAAhB,KACA,GAAoCP,EAAAA,EAAAA,UAAS,IAA7C,eAAOQ,EAAP,KAAmBC,EAAnB,KACA,GAAwCT,EAAAA,EAAAA,UAAS,IAAjD,eAAOU,EAAP,KAAqBC,EAArB,KACA,GAAkCX,EAAAA,EAAAA,UAAS,IAA3C,eAAOY,EAAP,KAAkBC,EAAlB,KACA,GAAwCb,EAAAA,EAAAA,UAAS,IAAjD,eAAOc,EAAP,KAAqBC,EAArB,KACA,GAA4Cf,EAAAA,EAAAA,UAAS,MAArD,eAAOgB,EAAP,KAAuBC,EAAvB,KACA,GAAwCjB,EAAAA,EAAAA,UAAS,IAAjD,eAAOkB,EAAP,KAAqBC,GAArB,KACA,IAA0DnB,EAAAA,EAAAA,UAAS,IAAnE,iBAAOoB,GAAP,MAA8BC,GAA9B,MAEMC,GAAU3B,EACV4B,IAAWC,EAAAA,EAAAA,MACXC,IAAWC,EAAAA,EAAAA,MACXC,IAASC,EAAAA,EAAAA,OAEfC,EAAAA,EAAAA,YAAS,iBAAC,yFACY,QAAhBF,GAAOG,KADH,iCAEaP,IAASQ,EAAAA,EAAAA,IAAgBJ,GAAOG,OAF7C,OAEAE,EAFA,OAGNvB,EAAa,OAACuB,QAAD,IAACA,OAAD,EAACA,EAAMC,aACpB1B,EAAU,OAACyB,QAAD,IAACA,GAAD,UAACA,EAAM1B,eAAP,aAAC,EAAe4B,KAC1B/B,EAAY,IAAIF,KAAJ,OAAS+B,QAAT,IAASA,OAAT,EAASA,EAAM9B,WAC3BG,EAAU,IAAIJ,KAAJ,OAAS+B,QAAT,IAASA,OAAT,EAASA,EAAM5B,SACzBS,EAAY,OAACmB,QAAD,IAACA,OAAD,EAACA,EAAMpB,UAAUuB,MAC7BpB,EAAe,OAACiB,QAAD,IAACA,OAAD,EAACA,EAAMpB,UAAUE,cAChCH,EAAe,OAACqB,QAAD,IAACA,OAAD,EAACA,EAAMtB,cAThB,4CAWP,CAACqB,EAAAA,KAEJ,IAyDMK,GAAW,WACf3B,EAAc,IACdgB,GAAS,aAEXI,EAAAA,EAAAA,YAAU,WACRN,IAASc,EAAAA,EAAAA,IAAkBV,GAAOQ,SACjC,CAACE,EAAAA,KAmBJ,OACE,iCACE,SAAC,KAAD,WACE,SAAC,KAAD,CAAMC,GAAI,GAAV,UACE,UAAC,KAAD,CAAOC,UAAU,OAAjB,WACE,SAAC,KAAD,WACE,+CAAuBZ,GAAOQ,KAA9B,UAEF,SAAC,KAAD,WACE,SAAC,KAAD,CAAYI,UAAU,aAAtB,UACE,SAAC,KAAD,CAAOC,SA5FC,SAACC,GAErB,GADAA,EAAEC,iBACc,KAAZpC,IAAmBJ,GAA6B,KAAjBgB,EACjC,OAAOyB,EAAAA,EAAAA,GAAS,QAAS,0BAE3B,IAAKnC,GAAaA,EAAWoC,MAAM,gBACjC,OAAOD,EAAAA,EAAAA,GAAS,QAAS,+CAE3B,IAAIV,EAAeY,MAAMC,QAAQtC,GAAsCA,EAAxBA,EAAWuC,MAAM,KAChEd,EAAcA,EAAYe,MAAM,EAAGf,EAAYgB,QAE/C,IAAMC,EAAM,OAAGpC,QAAH,IAAGA,OAAH,EAAGA,EAAcqC,KAAI,SAACC,GAChC,MAAO,CACLC,KAAI,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAAOC,KACbC,MAAK,OAAEF,QAAF,IAAEA,OAAF,EAAEA,EAAOE,UAGE,QAAhB3B,GAAOG,KACTP,IACEgC,EAAAA,EAAAA,IACE5B,GAAOG,KACP,CACExB,QAAAA,EACAF,OAAAA,EACAF,SAAAA,EACA+B,YAAAA,EACAf,aAAAA,EACAR,aAAAA,EACAE,UAAW,CACTuB,KAAMvB,EACNE,aAAcoC,IAGlBd,KAIJb,IACEiC,EAAAA,EAAAA,IACE,CACElD,QAAAA,EACAmD,OAAQ3D,EAAWoC,IACnB9B,OAAAA,EACAF,SAAAA,EACA+B,YAAAA,EACAf,aAAAA,EACAR,aAAAA,EACAE,UAAW,CACTuB,KAAMvB,EACNE,aAAcoC,IAGlBd,MAwCM,UACE,UAAC,KAAD,CAAMG,UAAU,2BAAhB,WACE,UAAC,KAAD,CAAMD,GAAI,EAAGC,UAAU,GAAvB,WACE,iBAAKA,UAAU,QAAf,WACE,SAAC,KAAD,CAAYmB,QAAQ,yBAApB,6BACA,SAAC,KAAD,CACEC,aAAc3C,EACd4C,SAAU,SAACN,GAAD,OAlCZ,SAACO,GAKrB,IAAKA,EAAiB,OAAOhD,EAAa,QAEpB,IAAD,IAAjBgD,IACFtD,EAAWsD,EAAgB3B,KAC3BrB,EAAY,OAACgD,QAAD,IAACA,OAAD,EAACA,EAAiBjD,UAAUuB,MACY,KAArC,OAAf0B,QAAe,IAAfA,GAAA,UAAAA,EAAiBjD,iBAAjB,eAA4BE,aAAamC,QACrClC,EAAe,OAAC8C,QAAD,IAACA,GAAD,UAACA,EAAiBjD,iBAAlB,aAAC,EAA4BE,cAC5CC,EAAgB,IACpBE,EAAkB4C,GAClBxC,GAAyBwC,IAoBgBC,CAAcR,IACnChC,QAASA,QAKZN,GACC,SAAC,KAAD,CAAY+C,cAAe,EAAGxB,UAAU,OAAxC,UACE,SAAC,KAAD,CAAgByB,QAAS,EAAzB,UACE,SAAC,KAAD,WACE,UAAC,KAAD,YACE,UAAC,KAAD,CAAMzB,UAAU,mBAAmBD,GAAI,EAAvC,WACE,iBAAKC,UAAU,SAAf,WACE,cAAGA,UAAU,WAAb,oBACA,cAAGA,UAAU,QAAb,gBAAsBvB,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAgBqC,WAExC,iBAAKd,UAAU,SAAf,WACE,cAAGA,UAAU,WAAb,oBACA,cAAGA,UAAU,QAAb,gBAAsBvB,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAgBiD,qBAe1C,UAAC,KAAD,CAAM1B,UAAU,mBAAmBD,GAAI,EAAvC,WACE,iBAAKC,UAAU,SAAf,WACE,cAAGA,UAAU,WAAb,qBACA,cAAGA,UAAU,QAAb,gBACGnB,SADH,IACGA,QADH,EACGA,GAAuB8C,QAAvB,OAA+BpE,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAYqE,gBAOhD,iBAAK5B,UAAU,SAAf,WACE,cAAGA,UAAU,WAAb,sBACA,cAAGA,UAAU,OAAb,SACG,OAACvB,QAAD,IAACA,GAAAA,EAAgBoD,WAGhB,iBAAM7B,UAAU,0BAAhB,wBAFA,iBAAMA,UAAU,yBAAhB,0BAWN,iBAAKA,UAAU,SAAf,WACE,cAAGA,UAAU,WAAb,6BACA,cAAGA,UAAU,QAAb,gBAAsBvB,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAgBqD,sBAG1C,mBAEA,4BACE,cAAG9B,UAAU,WAAb,2BACA,cAAGA,UAAU,kBAAb,UAAgC+B,EAAAA,EAAAA,IAAK,OAACtD,QAAD,IAACA,OAAD,EAACA,EAAgBuD,2BAM9D,SAEN,UAAC,KAAD,CAAMhC,UAAU,GAAhB,UACiB,WAAd3B,GACC,iBAAK2B,UAAU,OAAf,WACE,SAAC,KAAD,CAAYmB,QAAQ,8BAApB,yBACA,SAAC,KAAD,CACEc,GAAG,8BACHC,KAAK,IACLnB,MAAO9C,EACPkE,YAAY,oEACZd,SAAU,SAACnB,GAAD,OAAOhC,EAAcgC,EAAEkC,OAAOrB,aAK5B,SAAd1C,GACF,4BACE,iBAAK2B,UAAU,OAAf,WACE,SAAC,KAAD,CAAYmB,QAAQ,8BAApB,yBAGA,SAAC,KAAD,CACEc,GAAG,8BACHC,KAAK,IACLnB,MAAO9C,EACPkE,YAAY,oEACZd,SAAU,SAACnB,GAAD,OAAOhC,EAAcgC,EAAEkC,OAAOrB,cAK5C,iBAAKf,UAAU,OAAf,WACE,SAAC,KAAD,CAAYmB,QAAQ,8BAApB,2BAGA,SAAC,KAAD,CACEc,GAAG,8BACHC,KAAK,IACLnB,MAAO5C,EACPgE,YAAY,oBACZd,SAAU,SAACnB,GAAD,OAAO9B,EAAgB8B,EAAEkC,OAAOrB,gBAMhC,WAAd1C,EAAA,OACFE,QADE,IACFA,OADE,EACFA,EAAcqC,KAAI,SAACC,EAAOwB,GAAR,OAChB,iBAAiBrC,UAAU,OAA3B,WACE,SAAC,KAAD,CAAYmB,QAAQ,2BAApB,SAAgDN,EAAMC,QACtD,SAAC,KAAD,CACElB,KAAMiB,EAAMyB,SACZH,YAAY,cACZI,OAAQ,SAACrC,GAA0B,IAAvBY,EAAsB,uDAAfD,EAAMC,KACjB0B,EAAa,OAAGjE,QAAH,IAAGA,OAAH,EAAGA,EAAckE,QAAO,SAACC,EAAQC,GAClD,OACED,EADEC,EAAK7B,OAASA,EACV,kBAAO4B,GAAP,oBAAoBC,GAApB,IAA0B5B,MAAOb,EAAEkC,OAAOrB,UAG1C,kBAAO2B,GAAP,CAAeC,MAGtB,IACHnE,EAAgBgE,QAfZH,MAoBV,KAMH5D,IAAkB,iBAAKuB,UAAU,OAAf,WACjB,SAAC,KAAD,6BACA,SAAC,KAAD,CACEJ,KAAK,OACLuC,YAAY,sBACZ,aAAW,mBACXd,SAAU,SAACnB,GAAD,OAAOtB,GAAgBsB,EAAEkC,OAAOrB,cAG9C,iBAAKf,UAAU,OAAf,WACE,SAAC,KAAD,0BACA,SAAC,IAAD,CAAY4C,SAAUjF,EAAU0D,SAAU,SAACwB,GAAD,OAAUjF,EAAYiF,UAElE,gBAAK7C,UAAU,kBAAf,UACE,SAAC,KAAD,CACEJ,KAAK,SACLkD,MAAM,YACNC,QAAQ,UACR/C,UAAU,WAJZ,SAMmB,QAAhBZ,GAAOG,KAAiB,OAAS,sCAWtD,SAAC,KAAD","sources":["views/order/AddOrder.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CFormTextarea,\n  CRow,\n  CFormSelect,\n  CContainer,\n  CAccordion,\n  CAccordionBody,\n  CAccordionHeader,\n  CAccordionItem,\n} from '@coreui/react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport {\n  serviceListAction,\n  addOrderAction,\n  orderByIdAction,\n  updateOrderAction,\n} from 'src/store/actions/order'\nimport { serviceList, user, order } from 'src/store/selector/order'\nimport { ToastContainer } from 'react-toastify'\nimport { toastify } from 'src/store/services/toastify'\nimport Select from 'react-select'\nimport 'react-toastify/dist/ReactToastify.css'\nimport parse from 'html-react-parser'\nconst AddOrder = () => {\n  const services = useSelector(serviceList)\n  const userDetail = useSelector(user)\n  const [fromDate, setFromDate] = useState(new Date())\n  const [toDate, setToDate] = useState(new Date())\n  const [service, setService] = useState('')\n  const [imeiNumber, setImeiNumber] = useState([])\n  const [serverFields, setServerFields] = useState([])\n  const [fieldType, setFieldType] = useState('')\n  const [customFields, setCustomFields] = useState([])\n  const [selectedOption, setSelectedOption] = useState(null)\n  const [serialNumber, setSerialNumber] = useState('')\n  const [selectedServiceDetail, setSelectedServiceDetail] = useState('')\n\n  const options = services\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n  const params = useParams()\n\n  useEffect(async () => {\n    if (params.mode !== 'new') {\n      const data = await dispatch(orderByIdAction(params.mode))\n      setImeiNumber(data?.imeiNumbers)\n      setService(data?.service?._id)\n      setFromDate(new Date(data?.fromDate))\n      setToDate(new Date(data?.toDate))\n      setFieldType(data?.fieldType.type)\n      setCustomFields(data?.fieldType.customFields)\n      setServerFields(data?.serverFields)\n    }\n  }, [orderByIdAction])\n\n  const submitHandler = (e) => {\n    e.preventDefault()\n    if (service === '' || !fromDate || serialNumber === '')\n      return toastify('error', 'Please fill all fields')\n\n    if (!imeiNumber ? imeiNumber.match(/^\\d+(,\\d+)*$/) : null)\n      return toastify('error', 'Enter valid IMEI number according to format')\n\n    let imeiNumbers = !Array.isArray(imeiNumber) ? imeiNumber.split(',') : imeiNumber\n    imeiNumbers = imeiNumbers.slice(0, imeiNumbers.length)\n\n    const fields = customFields?.map((field) => {\n      return {\n        name: field?.name,\n        value: field?.value,\n      }\n    })\n    if (params.mode !== 'new') {\n      dispatch(\n        updateOrderAction(\n          params.mode,\n          {\n            service,\n            toDate,\n            fromDate,\n            imeiNumbers,\n            serialNumber,\n            serverFields,\n            fieldType: {\n              type: fieldType,\n              customFields: fields,\n            },\n          },\n          callback,\n        ),\n      )\n    } else {\n      dispatch(\n        addOrderAction(\n          {\n            service,\n            userId: userDetail._id,\n            toDate,\n            fromDate,\n            imeiNumbers,\n            serialNumber,\n            serverFields,\n            fieldType: {\n              type: fieldType,\n              customFields: fields,\n            },\n          },\n          callback,\n        ),\n      )\n    }\n  }\n  const callback = () => {\n    setImeiNumber('')\n    navigate('/orders')\n  }\n  useEffect(() => {\n    dispatch(serviceListAction(params.type))\n  }, [serviceListAction])\n\n  const selectService = (selectedService) => {\n    // return\n    // const serviceId = e.target.value\n    // const service = services.find((item) => item._id === serviceId)\n\n    if (!selectedService) return setFieldType('NONE')\n\n    if (selectedService) {\n      setService(selectedService._id)\n      setFieldType(selectedService?.fieldType.type)\n      selectedService?.fieldType?.customFields.length !== 0\n        ? setCustomFields(selectedService?.fieldType?.customFields)\n        : setCustomFields([])\n      setSelectedOption(selectedService)\n      setSelectedServiceDetail(selectedService)\n    }\n  }\n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Create Order ({params.type})</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CContainer className=\" mt-3 mb-5\">\n                <CForm onSubmit={submitHandler}>\n                  <CRow className=\" justify-content-center \">\n                    <CCol xs={6} className=\"\">\n                      <div className=\"mb-3 \">\n                        <CFormLabel htmlFor=\"exampleFormControlText\">Select Service</CFormLabel>\n                        <Select\n                          defaultValue={selectedOption}\n                          onChange={(value) => selectService(value)}\n                          options={options}\n                        />\n\n                      </div>\n\n                      {selectedOption ? (\n                        <CAccordion activeItemKey={1} className=\"mb-2\">\n                          <CAccordionItem itemKey={1}>\n                            <CAccordionBody>\n                              <CRow>\n                                <CCol className=\"order-detail-tag\" xs={6}>\n                                  <div className=\"d-flex\">\n                                    <p className=\"fw-bold \">Name:</p>\n                                    <p className=\"ps-2 \">{selectedOption?.name}</p>\n                                  </div>\n                                  <div className=\"d-flex\">\n                                    <p className=\"fw-bold \">Type:</p>\n                                    <p className=\"ps-2 \">{selectedOption?.serviceType}</p>\n                                  </div>\n                                  {/* <div className=\"d-flex\">\n                                    <p className=\"fw-bold \">Supplier Name:</p>\n                                    <p className=\"ps-2 \">{selectedOption?.supplier}</p>\n                                  </div> */}\n                                  {/* <div className=\"d-flex\">\n                                    <p className=\"fw-bold \">Response Delay Time:</p>\n                                    <p className=\" ps-2\">{selectedOption?.responseDelayTime}</p>\n                                  </div>\n                                  <div className=\"d-flex\">\n                                    <p className=\"fw-bold \">Order Verify Time:</p>\n                                    <p className=\" ps-2\">{selectedOption?.orderVerfiyTime}</p>\n                                  </div> */}\n                                </CCol>\n                                <CCol className=\"order-detail-tag\" xs={6}>\n                                  <div className=\"d-flex\">\n                                    <p className=\"fw-bold \">Price:</p>\n                                    <p className=\" ps-2\">\n                                      {selectedServiceDetail?.credits[userDetail?.userType]}\n                                    </p>\n                                  </div>\n                                  {/* <div className=\"d-flex\">\n                                    <p className=\"fw-bold \">Cost Price:</p>\n                                    <p className=\" ps-2\">{selectedOption?.costPrice}</p>\n                                  </div> */}\n                                  <div className=\"d-flex\">\n                                    <p className=\"fw-bold \">Status:</p>\n                                    <p className=\"ps-2\">\n                                      {!selectedOption?.isDeleted ? (\n                                        <span className=\"badge bg-info ms-auto \">Active</span>\n                                      ) : (\n                                        <span className=\"badge bg-danger ms-auto\">In-Active</span>\n                                      )}\n                                    </p>\n                                  </div>\n                                  {/* <div className=\"d-flex\">\n                                    <p className=\"fw-bold \">Order Cancel Time:</p>\n                                    <p className=\" ps-2\">{selectedOption?.orderCancelTime}</p>\n                                  </div>\n                                  */}\n                                  <div className=\"d-flex\">\n                                    <p className=\"fw-bold \">Delivery Time:</p>\n                                    <p className=\" ps-2\">{selectedOption?.deliveryTime}</p>\n                                  </div>\n                                </CCol>\n                                <hr />\n\n                                <div>\n                                  <p className=\"fw-bold \">Description:</p>\n                                  <p className=\"ps-2 text-break\">{parse(selectedOption?.description)}</p>\n                                </div>\n                              </CRow>\n                            </CAccordionBody>\n                          </CAccordionItem>\n                        </CAccordion>\n                      ) : null}\n                    </CCol>\n                    <CCol className=\"\">\n                      {fieldType === 'SINGLE' ? (\n                        <div className=\"mb-3\">\n                          <CFormLabel htmlFor=\"exampleFormControlTextarea1\">IMEI Field</CFormLabel>\n                          <CFormTextarea\n                            id=\"exampleFormControlTextarea1\"\n                            rows=\"3\"\n                            value={imeiNumber}\n                            placeholder=\"seprate IMEI number with , ex: 358265010779665,358265010779665   \"\n                            onChange={(e) => setImeiNumber(e.target.value)}\n                          // required\n                          ></CFormTextarea>\n                          {/* <span>seprate IMEI number with \",\"</span> */}\n                        </div>\n                      ) : fieldType === 'BOTH' ? (\n                        <div>\n                          <div className=\"mb-3\">\n                            <CFormLabel htmlFor=\"exampleFormControlTextarea1\">\n                              IMEI Field\n                            </CFormLabel>\n                            <CFormTextarea\n                              id=\"exampleFormControlTextarea1\"\n                              rows=\"3\"\n                              value={imeiNumber}\n                              placeholder=\"seprate IMEI number with , ex: 358265010779665,358265010779665   \"\n                              onChange={(e) => setImeiNumber(e.target.value)}\n                            // required\n                            ></CFormTextarea>\n                            {/* <span>seprate IMEI number with \",\"</span> */}\n                          </div>\n                          <div className=\"mb-3\">\n                            <CFormLabel htmlFor=\"exampleFormControlTextarea1\">\n                              Server Field\n                            </CFormLabel>\n                            <CFormTextarea\n                              id=\"exampleFormControlTextarea1\"\n                              rows=\"3\"\n                              value={serverFields}\n                              placeholder=\"Enter server code\"\n                              onChange={(e) => setServerFields(e.target.value)}\n                            // required\n                            ></CFormTextarea>\n                            {/* <span>seprate IMEI number with \",\"</span> */}\n                          </div>\n                        </div>\n                      ) : fieldType === 'CUSTOM' ? (\n                        customFields?.map((field, index) => (\n                          <div key={index} className=\"mb-3\">\n                            <CFormLabel htmlFor=\"exampleFormControlInput1\">{field.name}</CFormLabel>\n                            <CFormInput\n                              type={field.dataType}\n                              placeholder=\"Enter value\"\n                              onBlur={(e, name = field.name) => {\n                                const updatedFields = customFields?.reduce((result, item) => {\n                                  if (item.name === name) {\n                                    result = [...result, { ...item, value: e.target.value }]\n                                    return result\n                                  } else {\n                                    result = [...result, item]\n                                    return result\n                                  }\n                                }, [])\n                                setCustomFields(updatedFields)\n                              }}\n                            />\n                          </div>\n                        ))\n                      ) : null}\n\n                      {/* <div className=\"mb-3\">\n                        <CFormLabel>End Date</CFormLabel>\n                        <DatePicker selected={toDate} onChange={(date) => setToDate(date)} />\n                      </div> */}\n                      {selectedOption && <div className=\"mb-3\">\n                        <CFormLabel>Serial Number</CFormLabel>\n                        <CFormInput\n                          type=\"text\"\n                          placeholder=\"Enter serial number\"\n                          aria-label=\"lg input example\"\n                          onChange={(e) => setSerialNumber(e.target.value)}\n                        />\n                      </div>}\n                      <div className=\"mb-3\">\n                        <CFormLabel>Start Date</CFormLabel>\n                        <DatePicker selected={fromDate} onChange={(date) => setFromDate(date)} />\n                      </div>\n                      <div className=\" pt-3  text-end\">\n                        <CButton\n                          type=\"submit\"\n                          color=\"secondary\"\n                          variant=\"outline\"\n                          className=\"text-end\"\n                        >\n                          {params.mode !== 'new' ? 'Save' : 'Place Order'}\n                        </CButton>\n                      </div>\n                    </CCol>\n                  </CRow>\n                </CForm>\n              </CContainer>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <ToastContainer />\n    </>\n  )\n}\n\nexport default AddOrder\n"],"names":["services","useSelector","serviceList","userDetail","user","useState","Date","fromDate","setFromDate","toDate","setToDate","service","setService","imeiNumber","setImeiNumber","serverFields","setServerFields","fieldType","setFieldType","customFields","setCustomFields","selectedOption","setSelectedOption","serialNumber","setSerialNumber","selectedServiceDetail","setSelectedServiceDetail","options","dispatch","useDispatch","navigate","useNavigate","params","useParams","useEffect","mode","orderByIdAction","data","imeiNumbers","_id","type","callback","serviceListAction","xs","className","onSubmit","e","preventDefault","toastify","match","Array","isArray","split","slice","length","fields","map","field","name","value","updateOrderAction","addOrderAction","userId","htmlFor","defaultValue","onChange","selectedService","selectService","activeItemKey","itemKey","serviceType","credits","userType","isDeleted","deliveryTime","parse","description","id","rows","placeholder","target","index","dataType","onBlur","updatedFields","reduce","result","item","selected","date","color","variant"],"sourceRoot":""}