{"version":3,"file":"static/js/7143.d187cab6.chunk.js","mappings":"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","sources":["store/services/category.js","store/actions/category.js","store/selector/category.js","views/admin/categories/CategoryList.js"],"sourcesContent":["import { apiUrl } from 'src/configs/config'\nimport request from 'src/configs/request'\nimport { store } from '../store'\nconst setHeader = () => {\n  const { token } = store.getState().user\n  return {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  }\n}\n\nexport const addCategory = (obj) => {\n  return request.post(apiUrl + 'categories/create', obj, setHeader())\n}\n\nexport const categoryList = (obj) => {\n  return request.get(apiUrl + 'categories/list', setHeader())\n}\n\nexport const categoryById = (id) => {\n  return request.get(apiUrl + `categories/${id}`, setHeader())\n}\n\nexport const updateCategory = (id, obj) => {\n  return request.patch(apiUrl + `categories/${id}`, obj, setHeader())\n}\n","import {\n  addCategory,\n  categoryList,\n  categoryById,\n  updateCategory,\n} from 'src/store/services/category'\nimport { toastify } from '../services/toastify'\n\nexport const addCategoryAction = (obj, callback) => async (dispatch) => {\n  try {\n    const res = await addCategory(obj)\n    if (res.status === 201) {\n      toastify('success', res?.data?.data.message)\n      callback()\n    }\n  } catch (err) {\n    toastify('error', err?.response?.data?.err.message)\n  }\n}\n\nexport const categoryListAction = () => async (dispatch) => {\n  try {\n    const res = await categoryList()\n    if (res.status === 200) {\n      dispatch({\n        type: 'CategoryList',\n        payload: {\n          categories: res.data.data.categories,\n        },\n      })\n    }\n  } catch (err) {\n    toastify('error', err?.response?.data?.err.message)\n  }\n}\n\nexport const categoryByIdAction = (id) => async (dispatch) => {\n  try {\n    const res = await categoryById(id)\n    return res.data?.data?.category\n    // if (res.status === 200) {\n    //   dispatch({\n    //     type: 'CategoryList',\n    //     payload: {\n    //       categories: res.data.data.categories,\n    //     },\n    //   })\n    // }\n  } catch (err) {\n    toastify('error', err?.response?.data?.err.message)\n  }\n}\n\nexport const updateCategoryAction = (id, obj, callback) => async (dispatch) => {\n  try {\n    const res = await updateCategory(id, obj)\n    if (res.status === 200) {\n      toastify('success', res?.data?.data.message)\n\n      callback()\n    }\n  } catch (err) {\n    toastify('error', err?.response?.data?.err.message)\n  }\n}\n","export const categoryList = (state) => state?.category?.categories\n","import React, { useEffect, useState } from 'react'\nimport CIcon from '@coreui/icons-react'\nimport { ToastContainer } from 'react-toastify'\nimport { toastify } from 'src/store/services/toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport {\n  CCard,\n  CForm,\n  CCardBody,\n  CCardHeader,\n  CFormLabel,\n  CButton,\n  CCol,\n  CRow,\n  CFormTextarea,\n  CFormInput,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n} from '@coreui/react'\nimport { cilPencil, cilMagnifyingGlass } from '@coreui/icons'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  addCategoryAction,\n  categoryListAction,\n  categoryByIdAction,\n  updateCategoryAction,\n} from 'src/store/actions/category'\nimport { categoryList } from 'src/store/selector/category'\n\nimport { Link } from 'react-router-dom'\nconst CategoryList = () => {\n  const dispatch = useDispatch()\n  const categories = useSelector(categoryList)\n  const [categoryId, setCategoryId] = useState(null)\n  const [name, setName] = useState('')\n  const [description, setDescription] = useState('')\n  const [visible, setVisible] = useState(false)\n  const [isEdit, setIsEdit] = useState(false)\n\n  useEffect(() => {\n    dispatch(categoryListAction())\n  }, [categoryListAction])\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    if (!name || name === '') return toastify('error', 'Category name is mandatory')\n\n    if (isEdit) {\n      dispatch(updateCategoryAction(categoryId, { name, description }, callback))\n    } else {\n      dispatch(addCategoryAction({ name, description }, callback))\n    }\n    setVisible(false)\n    setIsEdit(false)\n    setName('')\n    setDescription('')\n    setCategoryId(null)\n  }\n  const callback = () => {\n    dispatch(categoryListAction())\n  }\n\n  const editCategory = async (categoryId) => {\n    const categoryData = await dispatch(categoryByIdAction(categoryId))\n    setCategoryId(categoryId)\n    setName(categoryData?.name)\n    setDescription(categoryData.description)\n    setIsEdit(true)\n    setVisible(true)\n  }\n\n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-4\">\n            <CCardHeader className=\"text-end\">\n              {/* <Link to=\"/admin/services/add\"> */}\n              <CButton\n                type=\"submit\"\n                onClick={() => setVisible(true)}\n                color=\"secondary\"\n                variant=\"outline\"\n              >\n                Add New\n              </CButton>\n              {/* </Link> */}\n            </CCardHeader>\n            <CCardBody>\n              <CTable>\n                <CTableHead>\n                  <CTableRow>\n                    <CTableHeaderCell scope=\"col\">Name</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Description</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Created At</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Action</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {categories?.map((category) => {\n                    return (\n                      <CTableRow key={category._id}>\n                        <CTableDataCell>{category?.name}</CTableDataCell>\n                        <CTableDataCell>\n                          {category?.description.length > 10\n                            ? `${category?.description.substring(0, 10)}...`\n                            : category?.description}\n                        </CTableDataCell>\n\n                        <CTableDataCell>\n                          {new Date(category?.createdAt).toISOString().split('T')[0]}\n                        </CTableDataCell>\n                        <CTableDataCell>\n                          <Link to=\"#\" className=\"ms-3\">\n                            <CIcon\n                              className=\"text-secondary ,edit-model-open\"\n                              icon={cilPencil}\n                              onClick={() => editCategory(category._id)}\n                            />\n                          </Link>\n                        </CTableDataCell>\n                      </CTableRow>\n                    )\n                  })}\n                </CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n\n        <CModal\n          backdrop=\"static\"\n          keyboard={false}\n          visible={visible}\n          onClose={() => {\n            setVisible(false), setIsEdit(false), setName(''), setDescription('')\n            setCategoryId(null)\n          }}\n        >\n          <CForm onSubmit={handleSubmit}>\n            <CModalHeader>\n              <CModalTitle>\n                {isEdit ? 'Edit' : 'Add'} Category {isEdit ? 'true' : 'fale'}\n              </CModalTitle>\n            </CModalHeader>\n            <CModalBody>\n              <div className=\"mb-3\">\n                <CFormLabel htmlFor=\"exampleFormControlInput1\">Name</CFormLabel>\n                <CFormInput\n                  type=\"text\"\n                  placeholder=\"Enter Category Name\"\n                  value={name}\n                  onChange={(e) => setName(e.target.value)}\n                />\n              </div>\n              <div className=\"mb-3\">\n                <CFormLabel htmlFor=\"exampleFormControlTextarea1\">Description</CFormLabel>\n                <CFormTextarea\n                  id=\"exampleFormControlTextarea1\"\n                  rows=\"3\"\n                  value={description}\n                  placeholder=\".... \"\n                  onChange={(e) => setDescription(e.target.value)}\n                ></CFormTextarea>\n              </div>\n            </CModalBody>\n            <CModalFooter>\n              <CButton type=\"submit\" color=\"secondary\" variant=\"outline\">\n                {isEdit ? 'Save' : 'Add'}\n              </CButton>\n            </CModalFooter>\n          </CForm>\n        </CModal>\n      </CRow>\n      <ToastContainer />\n    </>\n  )\n}\n\nexport default CategoryList\n"],"names":["setHeader","token","store","user","headers","Authorization","addCategory","obj","request","apiUrl","categoryById","id","updateCategory","addCategoryAction","callback","dispatch","res","status","toastify","data","message","response","err","categoryListAction","type","payload","categories","categoryByIdAction","category","updateCategoryAction","categoryList","state","useDispatch","useSelector","useState","categoryId","setCategoryId","name","setName","description","setDescription","visible","setVisible","isEdit","setIsEdit","useEffect","editCategory","categoryData","xs","className","onClick","color","variant","scope","map","length","substring","Date","createdAt","toISOString","split","to","icon","cilPencil","_id","backdrop","keyboard","onClose","onSubmit","e","preventDefault","htmlFor","placeholder","value","onChange","target","rows"],"sourceRoot":""}