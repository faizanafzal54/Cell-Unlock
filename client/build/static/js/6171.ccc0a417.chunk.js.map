{"version":3,"file":"static/js/6171.ccc0a417.chunk.js","mappings":"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","sources":["views/order/ViewOrder.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport CIcon from '@coreui/icons-react'\nimport 'react-toastify/dist/ReactToastify.css'\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CContainer,\n  CTable,\n  CTableHead,\n  CTableRow,\n  CTableHeaderCell,\n  CTableBody,\n  CTableDataCell,\n} from '@coreui/react'\nimport { cilPencil, cilPlus } from '@coreui/icons'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { order } from 'src/store/selector/order'\nimport { orderByIdAction } from 'src/store/actions/order'\nimport { useParams } from 'react-router-dom'\nconst ViewOrder = () => {\n  const [order, setOrder] = useState(null)\n  const dispatch = useDispatch()\n  const params = useParams()\n\n  useEffect(async () => {\n    const order = await dispatch(orderByIdAction(params.id))\n    setOrder(order)\n  }, [orderByIdAction])\n\n  const getClass = (_status) => {\n    if (_status === 'Confirmed') {\n      return 'text-primary'\n    } else if (_status === 'Completed') {\n      return 'text-success'\n    } else if (_status === 'Rejected') {\n      return 'text-danger'\n    }\n  }\n\n  return (\n    <>\n      <CContainer className=\"\">\n        <CRow>\n          <CCol xs={12}>\n            <CCard className=\"mb-4\">\n              <CCardHeader className=\"\">\n                <strong>Order Detail</strong>\n              </CCardHeader>\n              <CCardBody>\n                <CContainer>\n                  <CRow>\n                    <CCol className=\"order-detail-tag\" xs={6}>\n                      <div className=\"d-flex\">\n                        <p className=\"fw-bold \">Service Name:</p>\n                        <p className=\"ps-2 \">{order?.service?.name}</p>\n                      </div>\n                      <div className=\"d-flex\">\n                        <p className=\"fw-bold \">Order Number:</p>\n                        <p className=\" ps-2\">{order?.orderNumber}</p>\n                      </div>\n                      <div className=\"d-flex\">\n                        <p className=\"fw-bold \">Customer Name:</p>\n                        <p className=\" ps-2\">{order?.userId?.firstName}</p>\n                      </div>\n                      {order?.imeiNumbers?.length !== 0 ? (\n                        <div className=\"d-flex\">\n                          <p className=\"fw-bold \">IMEI Numbers:</p>\n                          <p className=\" ps-2\">\n                            {order?.imeiNumbers?.map((number, index) => (\n                              <li key={index}>{number}</li>\n                            ))}\n                          </p>\n                        </div>\n                      ) : null}\n                      {order?.serverFields?.length !== 0 ? (\n                        <div className=\"d-flex\">\n                          <p className=\"fw-bold \">Server Field:</p>\n                          <p className=\" ps-2\">\n                            {order?.serverFields?.map((number, index) => (\n                              <li key={index}>{number}</li>\n                            ))}\n                          </p>\n                        </div>\n                      ) : null}\n\n                      {order?.fieldType.customFields?.length !== 0 ? (\n                        <div className=\"d-flex\">\n                          <p className=\"fw-bold \">Custom Fields:</p>\n                          <p className=\" ps-2\">\n                            {order?.fieldType.customFields?.map((field, index) => (\n                              <li key={index}>\n                                {field.name} : {field.value}\n                              </li>\n                            ))}\n                          </p>\n                        </div>\n                      ) : null}\n                    </CCol>\n                    <CCol className=\"order-detail-tag\" xs={6}>\n                      <div className=\"d-flex\">\n                        <p className=\"fw-bold \">Status:</p>\n                        <p className={`ps-2 ${getClass(order?.status)}`}>\n                          <b>{order?.status}</b>\n                        </p>\n                      </div>\n\n                      <div className=\"d-flex\">\n                        <p className=\"fw-bold \">Start Date:</p>\n                        <p className=\" ps-2\">\n                          {order?.fromDate\n                            ? new Date(order?.fromDate).toISOString().split('T')[0]\n                            : null}\n                        </p>\n                      </div>\n                      {/* \n                      <div className=\"d-flex\">\n                        <p className=\"fw-bold \">End Date:</p>\n                        <p className=\" ps-2\">\n                          {order?.toDate\n                            ? new Date(order?.toDate).toISOString().split('T')[0]\n                            : null}\n                        </p>\n                      </div> */}\n                      <div className=\"d-flex\">\n                        <p className=\"fw-bold \">Serial Number:</p>\n                        <p className=\" ps-2\">{order?.serialNumber}</p>\n                      </div>\n                      <div className=\"d-flex\">\n                        <p className=\"fw-bold \">Credits:</p>\n                        <p className=\" ps-2\">{order?.creditsUsed}</p>\n                      </div>\n                    </CCol>\n                    <hr />\n                    <div className=\"d-flex\">\n                      <p className=\"fw-bold \">Code:</p>\n                      <p className=\" ps-2\">{order?.code}</p>\n                    </div>\n                    {/* <div className=\"d-flex\">\n                      <p className=\"fw-bold \">Description:</p>\n                      <p className=\" ps-2\">{order?.description}</p>\n                    </div> */}\n                  </CRow>\n                </CContainer>\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n        <CRow>\n          <CCol>\n            <CCard className=\"mb-4\">\n              <CCardHeader className=\"\">\n                <strong>History </strong>\n              </CCardHeader>\n              <CCardBody>\n                <CTable>\n                  <CTableHead>\n                    <CTableRow>\n                      <CTableHeaderCell scope=\"col\">Sr#</CTableHeaderCell>\n                      <CTableHeaderCell scope=\"col\">User name</CTableHeaderCell>\n                      <CTableHeaderCell scope=\"col\">Action</CTableHeaderCell>\n                      <CTableHeaderCell scope=\"col\">Date</CTableHeaderCell>\n                    </CTableRow>\n                  </CTableHead>\n                  <CTableBody>\n                    {order?.history?.map((hist, index) => {\n                      return (\n                        <CTableRow key={hist._id}>\n                          <CTableDataCell>{index + 1}</CTableDataCell>\n                          <CTableDataCell>\n                            {hist?.userId?.firstName + ' ' + hist?.userId?.lastName}\n                          </CTableDataCell>\n                          <CTableDataCell>{hist?.action}</CTableDataCell>\n                          <CTableDataCell>\n                            {new Date(hist?.updatedAt).toISOString().split('T')[0]}\n                          </CTableDataCell>\n                        </CTableRow>\n                      )\n                    })}\n                  </CTableBody>\n                </CTable>\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </>\n  )\n}\n\nexport default ViewOrder\n"],"names":["useState","order","setOrder","dispatch","useDispatch","params","useParams","useEffect","orderByIdAction","id","_status","className","xs","service","name","orderNumber","userId","firstName","imeiNumbers","length","map","number","index","serverFields","fieldType","customFields","field","value","status","fromDate","Date","toISOString","split","serialNumber","creditsUsed","code","scope","history","hist","lastName","action","updatedAt","_id"],"sourceRoot":""}